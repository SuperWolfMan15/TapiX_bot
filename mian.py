import os
import random
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
PROMOCODES = [
    "SUNNYDAY", "BITEBYTE", "LUCKYCLAP", "COZYTAP", "TAPWAVE",
    "ZAPBOOM", "QUIETPOWER", "TAPSTORM", "CLOUDYCODE", "BUBBLETAP",
    "GAMERGRIND", "EASYTAP", "FINALHIT"
]

# –°–ª–æ–≤–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
users = {}
invited_by = {}

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
app = Flask(__name__)

@app.route("/")
def home():
    return "TapiX Bot is running!"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite")],
        [InlineKeyboardButton("üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promos")]
    ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    args = context.args

    if uid not in users:
        users[uid] = {"invites": 0, "promos": []}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        if args:
            try:
                inviter_id = int(args[0])
                if inviter_id != uid and inviter_id in users:
                    if uid not in invited_by:
                        invited_by[uid] = inviter_id
                        users[inviter_id]["invites"] += 1

                        # –í—ã–¥–∞—á–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
                        if users[inviter_id]["invites"] == 5:
                            code = random.choice(PROMOCODES)
                            users[inviter_id]["promos"].append(code)
                            await context.bot.send_message(
                                inviter_id,
                                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 5 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: {code}"
                            )
            except:
                pass

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–≠—Ç–æ –±–æ—Ç TapiX üéÆ",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "invite":
        invite_link = f"https://t.me/{context.bot.username}?start={user_id}"
        await query.edit_message_text(
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n{invite_link}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )

    elif query.data == "promos":
        promos = users.get(user_id, {}).get("promos", [])
        if promos:
            await query.edit_message_text(
                f"üéÅ –í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n" + "\n".join(promos),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )
        else:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )

    elif query.data == "back":
        await query.edit_message_text(
            f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì±",
            reply_markup=main_menu()
        )

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    await app.run_polling()

# Flask –∑–∞–ø—É—Å–∫ –Ω–∞ Railway
if __name__ == "__main__":
    import asyncio
    from threading import Thread

    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=lambda: app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))).start()

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    asyncio.run(main())